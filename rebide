#!/bin/bash

# Rails Development Environment Setup Script
# Sets up tmux, docker services, Sublime Text, and Chrome with custom profile
# Generic version for any Rails project
#
# Configuration: Create a .rebide.conf file in your project root with:
#   CHROME_PROFILE="Profile 1"    # Chrome profile to use (optional)
#   RAILS_PORT="3000"              # Rails server port (default: 3000)
#   CHROME_URL=""                  # Custom URL (default: http://localhost:$RAILS_PORT)

set -e

# Function to find docker-compose.yml location
find_docker_compose() {
    if [ -f "$PWD/docker-compose.yml" ]; then
        echo "$PWD"
    elif [ -f "$PWD/../docker-compose.yml" ]; then
        echo "$PWD/.."
    else
        echo ""
    fi
}

# Handle --list-profiles flag
if [ "$1" = "--list-profiles" ]; then
    echo "üìã Available Chrome profiles:"
    echo ""

    local_state="$HOME/.config/google-chrome/Local State"

    if [ -f "$local_state" ] && command -v jq >/dev/null 2>&1; then
        # Use Local State file for accurate profile names
        jq -r '.profile.info_cache | to_entries[] | "\(.key): \(.value.name)"' "$local_state" 2>/dev/null | while read -r line; do
            echo "  $line"
        done
    else
        # Fallback to checking individual Preferences files
        for profile in ~/.config/google-chrome/*/Preferences; do
            if [ -f "$profile" ]; then
                dir=$(dirname "$profile")
                profile_dir=$(basename "$dir")
                if command -v jq >/dev/null 2>&1; then
                    name=$(jq -r '.profile.name // "Unknown"' "$profile" 2>/dev/null)
                    echo "  $profile_dir: $name"
                else
                    echo "  $profile_dir"
                fi
            fi
        done
    fi

    echo ""
    echo "üí° Use these profile directory names (e.g., 'Default', 'Profile 1') in your .chrome-profile file"
    exit 0
fi

# Parse flags
SKIP_DOCKER=false
for arg in "$@"; do
    case $arg in
        --skip-docker)
            SKIP_DOCKER=true
            shift
            ;;
    esac
done

# Handle --close flag
if [ "$1" = "--close" ]; then
    PROJECT_NAME=$(basename "$PWD")
    echo "üõë Closing $PROJECT_NAME development environment..."

    # Find docker-compose.yml
    DOCKER_COMPOSE_DIR=$(find_docker_compose)

    # Stop Docker services if docker-compose.yml was found and --skip-docker not set
    if [ "$SKIP_DOCKER" = false ] && [ -n "$DOCKER_COMPOSE_DIR" ]; then
        echo "üê≥ Stopping Docker services..."
        docker compose -f "$DOCKER_COMPOSE_DIR/docker-compose.yml" down
    elif [ "$SKIP_DOCKER" = true ]; then
        echo "‚è≠Ô∏è  Skipping Docker shutdown (--skip-docker flag set)"
    else
        echo "‚ö†Ô∏è  No docker-compose.yml found, skipping Docker shutdown"
    fi

    # Kill tmux session if it exists
    if tmux has-session -t "$PROJECT_NAME" 2>/dev/null; then
        echo "üì∫ Killing tmux session '$PROJECT_NAME'..."
        tmux kill-session -t "$PROJECT_NAME"
    else
        echo "‚ö†Ô∏è  No tmux session '$PROJECT_NAME' found"
    fi

    echo "‚úÖ Environment closed!"
    exit 0
fi

# Get project name from current directory
PROJECT_NAME=$(basename "$PWD")

# Display banner
echo ""
echo " ‚ñÑ‚ñÑ‚ñÑ ‚ñó‚ñû‚ñÄ‚ñö‚ññ‚ñó‚ññ   ‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ‚ñó‚ñÑ‚ñÑ‚ñÑ  ‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ"
echo "‚ñà    ‚ñê‚ñõ‚ñÄ‚ñÄ‚ñò‚ñê‚ñå     ‚ñà  ‚ñê‚ñå  ‚ñà ‚ñê‚ñå   "
echo "‚ñà    ‚ñù‚ñö‚ñÑ‚ñÑ‚ññ‚ñê‚ñõ‚ñÄ‚ñö‚ññ  ‚ñà  ‚ñê‚ñå  ‚ñà ‚ñê‚ñõ‚ñÄ‚ñÄ‚ñò"
echo "          ‚ñê‚ñô‚ñÑ‚ñû‚ñò‚ñó‚ñÑ‚ñà‚ñÑ‚ññ‚ñê‚ñô‚ñÑ‚ñÑ‚ñÄ ‚ñê‚ñô‚ñÑ‚ñÑ‚ññ"
echo ""

echo "üöÄ Starting $PROJECT_NAME development environment..."

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check required commands
echo "üìã Checking dependencies..."
for cmd in tmux docker subl google-chrome; do
    if ! command_exists "$cmd"; then
        echo "‚ùå Error: $cmd is not installed or not in PATH"
        echo "Please install $cmd and try again"
        exit 1
    fi
done

# Set defaults
CHROME_PROFILE=""
RAILS_PORT="3000"
CHROME_URL=""

# Read configuration from .rebide.conf file
REBIDE_CONF="$PWD/.rebide.conf"
if [ -f "$REBIDE_CONF" ]; then
    echo "‚öôÔ∏è  Loading configuration from .rebide.conf..."
    source "$REBIDE_CONF"
else
    echo "‚öôÔ∏è  No .rebide.conf found, using defaults"
    echo "üí° Create a .rebide.conf file to customize settings"
fi

# Set CHROME_URL default if not specified in config
if [ -z "$CHROME_URL" ]; then
    CHROME_URL="http://localhost:$RAILS_PORT"
fi

# Display configuration
echo "üîå Rails port: $RAILS_PORT"
if [ -n "$CHROME_PROFILE" ]; then
    echo "üìÅ Chrome profile: $CHROME_PROFILE"
    echo "üåê Chrome URL: $CHROME_URL"
else
    echo "üìÅ Chrome: disabled (no CHROME_PROFILE set)"
fi

# Find docker-compose.yml (check current folder, then parent folder)
DOCKER_COMPOSE_DIR=$(find_docker_compose)
if [ "$DOCKER_COMPOSE_DIR" = "$PWD" ]; then
    echo "üê≥ Found docker-compose.yml in current directory"
elif [ "$DOCKER_COMPOSE_DIR" = "$PWD/.." ]; then
    echo "üê≥ Found docker-compose.yml in parent directory"
elif [ -z "$DOCKER_COMPOSE_DIR" ]; then
    echo "‚ö†Ô∏è  No docker-compose.yml found, skipping Docker services"
fi

# Start Docker services if docker-compose.yml was found and --skip-docker not set
if [ "$SKIP_DOCKER" = false ] && [ -n "$DOCKER_COMPOSE_DIR" ]; then
    echo "üê≥ Starting Docker services (database and Redis)..."
    docker compose -f "$DOCKER_COMPOSE_DIR/docker-compose.yml" up -d
elif [ "$SKIP_DOCKER" = true ]; then
    echo "‚è≠Ô∏è  Skipping Docker services (--skip-docker flag set)"
fi

# Wait a moment for services to be ready
echo "‚è≥ Waiting for services to start..."
sleep 3

# Kill existing tmux session if it exists
if tmux has-session -t "$PROJECT_NAME" 2>/dev/null; then
    echo "üîÑ Killing existing tmux session '$PROJECT_NAME'..."
    tmux kill-session -t "$PROJECT_NAME"
fi

# Create new tmux session
echo "üì∫ Creating tmux session '$PROJECT_NAME'..."
tmux new-session -d -s "$PROJECT_NAME" -n main

# Split the window into 3 panes
# Pane 0: claude (top left)
# Pane 1: bash (top right)
# Pane 2: bin/dev (bottom full width)

# Create vertical split (top and bottom)
tmux split-window -v -t "$PROJECT_NAME":main

# Split the top pane horizontally (left and right)
tmux split-window -h -t "$PROJECT_NAME":main.0

# Now we have 3 panes:
# Pane 0 (top left): will run claude
# Pane 1 (top right): bash console
# Pane 2 (bottom): will run bin/dev

# Configure panes
echo "‚öôÔ∏è  Configuring tmux panes..."

# Pane 0: Run claude (top left)
tmux send-keys -t "$PROJECT_NAME":main.0 'echo "Starting Claude Code..."' Enter
tmux send-keys -t "$PROJECT_NAME":main.0 'claude' Enter

# Pane 1: Regular bash console (top right)
tmux send-keys -t "$PROJECT_NAME":main.1 'echo "Ready for commands..."' Enter
tmux send-keys -t "$PROJECT_NAME":main.1 'clear' Enter

# Pane 2: Run bin/dev (bottom) with PORT environment variable
tmux send-keys -t "$PROJECT_NAME":main.2 'echo "Starting Rails development server..."' Enter
tmux send-keys -t "$PROJECT_NAME":main.2 "PORT=$RAILS_PORT bin/dev" Enter

# Start Sublime Text
echo "üìù Opening Sublime Text..."
subl "$PWD" &

# Start Chrome with custom profile (only if .chrome-profile exists)
if [ -n "$CHROME_PROFILE" ]; then
    echo "üåê Opening Chrome with profile: $CHROME_PROFILE at $CHROME_URL..."
    google-chrome \
        --profile-directory="$CHROME_PROFILE" \
        --new-window \
        --no-first-run \
        --no-default-browser-check \
        "$CHROME_URL" &
fi

# Wait a moment for applications to start
sleep 2

# Attach to tmux session
echo "‚úÖ Environment ready! Attaching to tmux session..."
echo ""
echo "Tmux panes:"
echo "  - Top left: Claude Code"
echo "  - Top right: Bash console"
echo "  - Bottom: Rails development server (bin/dev)"
echo ""
if [ -n "$CHROME_PROFILE" ]; then
    echo "Chrome profile: $CHROME_PROFILE"
    echo ""
fi
echo "To detach from tmux: Ctrl+B, then D"
echo "To reattach later: tmux attach -t $PROJECT_NAME"
echo ""

tmux attach -t "$PROJECT_NAME"